/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as ArtworkIdImport } from "./routes/artwork/$id";
import { Route as ArtworkIndexImport } from "./routes/artwork/index";
import { Route as IndexImport } from "./routes/index";
import { Route as ProfilesImport } from "./routes/profiles";
import { Route as SearchImport } from "./routes/search";

// Create/Update Routes

const SearchRoute = SearchImport.update({
    id: "/search",
    path: "/search",
    getParentRoute: () => rootRoute,
} as any);

const ProfilesRoute = ProfilesImport.update({
    id: "/profiles",
    path: "/profiles",
    getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => rootRoute,
} as any);

const ArtworkIndexRoute = ArtworkIndexImport.update({
    id: "/artwork/",
    path: "/artwork/",
    getParentRoute: () => rootRoute,
} as any);

const ArtworkIdRoute = ArtworkIdImport.update({
    id: "/artwork/$id",
    path: "/artwork/$id",
    getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
    interface FileRoutesByPath {
        "/": {
            id: "/";
            path: "/";
            fullPath: "/";
            preLoaderRoute: typeof IndexImport;
            parentRoute: typeof rootRoute;
        };
        "/profiles": {
            id: "/profiles";
            path: "/profiles";
            fullPath: "/profiles";
            preLoaderRoute: typeof ProfilesImport;
            parentRoute: typeof rootRoute;
        };
        "/search": {
            id: "/search";
            path: "/search";
            fullPath: "/search";
            preLoaderRoute: typeof SearchImport;
            parentRoute: typeof rootRoute;
        };
        "/artwork/$id": {
            id: "/artwork/$id";
            path: "/artwork/$id";
            fullPath: "/artwork/$id";
            preLoaderRoute: typeof ArtworkIdImport;
            parentRoute: typeof rootRoute;
        };
        "/artwork/": {
            id: "/artwork/";
            path: "/artwork";
            fullPath: "/artwork";
            preLoaderRoute: typeof ArtworkIndexImport;
            parentRoute: typeof rootRoute;
        };
    }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
    "/": typeof IndexRoute;
    "/profiles": typeof ProfilesRoute;
    "/search": typeof SearchRoute;
    "/artwork/$id": typeof ArtworkIdRoute;
    "/artwork": typeof ArtworkIndexRoute;
}

export interface FileRoutesByTo {
    "/": typeof IndexRoute;
    "/profiles": typeof ProfilesRoute;
    "/search": typeof SearchRoute;
    "/artwork/$id": typeof ArtworkIdRoute;
    "/artwork": typeof ArtworkIndexRoute;
}

export interface FileRoutesById {
    __root__: typeof rootRoute;
    "/": typeof IndexRoute;
    "/profiles": typeof ProfilesRoute;
    "/search": typeof SearchRoute;
    "/artwork/$id": typeof ArtworkIdRoute;
    "/artwork/": typeof ArtworkIndexRoute;
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath;
    fullPaths: "/" | "/profiles" | "/search" | "/artwork/$id" | "/artwork";
    fileRoutesByTo: FileRoutesByTo;
    to: "/" | "/profiles" | "/search" | "/artwork/$id" | "/artwork";
    id: "__root__" | "/" | "/profiles" | "/search" | "/artwork/$id" | "/artwork/";
    fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
    IndexRoute: typeof IndexRoute;
    ProfilesRoute: typeof ProfilesRoute;
    SearchRoute: typeof SearchRoute;
    ArtworkIdRoute: typeof ArtworkIdRoute;
    ArtworkIndexRoute: typeof ArtworkIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
    IndexRoute: IndexRoute,
    ProfilesRoute: ProfilesRoute,
    SearchRoute: SearchRoute,
    ArtworkIdRoute: ArtworkIdRoute,
    ArtworkIndexRoute: ArtworkIndexRoute,
};

export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/profiles",
        "/search",
        "/artwork/$id",
        "/artwork/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/profiles": {
      "filePath": "profiles.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/artwork/$id": {
      "filePath": "artwork/$id.tsx"
    },
    "/artwork/": {
      "filePath": "artwork/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
