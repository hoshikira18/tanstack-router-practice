/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as AuthenticatedImport } from "./routes/_authenticated";
import { Route as AuthenticatedArtworkIdImport } from "./routes/_authenticated/artwork/$id";
import { Route as AuthenticatedArtworkIndexImport } from "./routes/_authenticated/artwork/index";
import { Route as IndexImport } from "./routes/index";
import { Route as ProfilesImport } from "./routes/profiles";
import { Route as SearchImport } from "./routes/search";

// Create/Update Routes

const SearchRoute = SearchImport.update({
    id: "/search",
    path: "/search",
    getParentRoute: () => rootRoute,
} as any);

const ProfilesRoute = ProfilesImport.update({
    id: "/profiles",
    path: "/profiles",
    getParentRoute: () => rootRoute,
} as any);

const AuthenticatedRoute = AuthenticatedImport.update({
    id: "/_authenticated",
    getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => rootRoute,
} as any);

const AuthenticatedArtworkIndexRoute = AuthenticatedArtworkIndexImport.update({
    id: "/artwork/",
    path: "/artwork/",
    getParentRoute: () => AuthenticatedRoute,
} as any);

const AuthenticatedArtworkIdRoute = AuthenticatedArtworkIdImport.update({
    id: "/artwork/$id",
    path: "/artwork/$id",
    getParentRoute: () => AuthenticatedRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
    interface FileRoutesByPath {
        "/": {
            id: "/";
            path: "/";
            fullPath: "/";
            preLoaderRoute: typeof IndexImport;
            parentRoute: typeof rootRoute;
        };
        "/_authenticated": {
            id: "/_authenticated";
            path: "";
            fullPath: "";
            preLoaderRoute: typeof AuthenticatedImport;
            parentRoute: typeof rootRoute;
        };
        "/profiles": {
            id: "/profiles";
            path: "/profiles";
            fullPath: "/profiles";
            preLoaderRoute: typeof ProfilesImport;
            parentRoute: typeof rootRoute;
        };
        "/search": {
            id: "/search";
            path: "/search";
            fullPath: "/search";
            preLoaderRoute: typeof SearchImport;
            parentRoute: typeof rootRoute;
        };
        "/_authenticated/artwork/$id": {
            id: "/_authenticated/artwork/$id";
            path: "/artwork/$id";
            fullPath: "/artwork/$id";
            preLoaderRoute: typeof AuthenticatedArtworkIdImport;
            parentRoute: typeof AuthenticatedImport;
        };
        "/_authenticated/artwork/": {
            id: "/_authenticated/artwork/";
            path: "/artwork";
            fullPath: "/artwork";
            preLoaderRoute: typeof AuthenticatedArtworkIndexImport;
            parentRoute: typeof AuthenticatedImport;
        };
    }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
    AuthenticatedArtworkIdRoute: typeof AuthenticatedArtworkIdRoute;
    AuthenticatedArtworkIndexRoute: typeof AuthenticatedArtworkIndexRoute;
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
    AuthenticatedArtworkIdRoute: AuthenticatedArtworkIdRoute,
    AuthenticatedArtworkIndexRoute: AuthenticatedArtworkIndexRoute,
};

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
    AuthenticatedRouteChildren,
);

export interface FileRoutesByFullPath {
    "/": typeof IndexRoute;
    "": typeof AuthenticatedRouteWithChildren;
    "/profiles": typeof ProfilesRoute;
    "/search": typeof SearchRoute;
    "/artwork/$id": typeof AuthenticatedArtworkIdRoute;
    "/artwork": typeof AuthenticatedArtworkIndexRoute;
}

export interface FileRoutesByTo {
    "/": typeof IndexRoute;
    "": typeof AuthenticatedRouteWithChildren;
    "/profiles": typeof ProfilesRoute;
    "/search": typeof SearchRoute;
    "/artwork/$id": typeof AuthenticatedArtworkIdRoute;
    "/artwork": typeof AuthenticatedArtworkIndexRoute;
}

export interface FileRoutesById {
    __root__: typeof rootRoute;
    "/": typeof IndexRoute;
    "/_authenticated": typeof AuthenticatedRouteWithChildren;
    "/profiles": typeof ProfilesRoute;
    "/search": typeof SearchRoute;
    "/_authenticated/artwork/$id": typeof AuthenticatedArtworkIdRoute;
    "/_authenticated/artwork/": typeof AuthenticatedArtworkIndexRoute;
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath;
    fullPaths: "/" | "" | "/profiles" | "/search" | "/artwork/$id" | "/artwork";
    fileRoutesByTo: FileRoutesByTo;
    to: "/" | "" | "/profiles" | "/search" | "/artwork/$id" | "/artwork";
    id:
        | "__root__"
        | "/"
        | "/_authenticated"
        | "/profiles"
        | "/search"
        | "/_authenticated/artwork/$id"
        | "/_authenticated/artwork/";
    fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
    IndexRoute: typeof IndexRoute;
    AuthenticatedRoute: typeof AuthenticatedRouteWithChildren;
    ProfilesRoute: typeof ProfilesRoute;
    SearchRoute: typeof SearchRoute;
}

const rootRouteChildren: RootRouteChildren = {
    IndexRoute: IndexRoute,
    AuthenticatedRoute: AuthenticatedRouteWithChildren,
    ProfilesRoute: ProfilesRoute,
    SearchRoute: SearchRoute,
};

export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/profiles",
        "/search"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/artwork/$id",
        "/_authenticated/artwork/"
      ]
    },
    "/profiles": {
      "filePath": "profiles.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/_authenticated/artwork/$id": {
      "filePath": "_authenticated/artwork/$id.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/artwork/": {
      "filePath": "_authenticated/artwork/index.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
